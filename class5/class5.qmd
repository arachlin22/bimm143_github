---
title: "class 5: data viz with ggplot"
author: "Abraham PID A16735986"
format: pdf
toc: true
---

## Background

There are many graphics systems available in R. These include "base" R and tons of add on packages like **ggplot2**.

Let's compare "base" and **ggplot2** briefly: We can use some example data that is built-in with R called `cars`:

```{r}
head(cars)
```

In base R I can just call `plot()`

```{r}
plot(cars)
```
How can we do this with **ggplot2**.

First we need to install the packages. We do this `install.packages("ggplot2")`. I only need to do this once and then it will be available on my computer from then on.


> Key point: I only install packages in the R console not within quarto docs or R scripts.

Before I use any add-on packages I must load it up with a call to `library()`
```{r}
library(ggplot2)
ggplot(cars)
```

Every ggplot has at least 3 things:

- the **data** (in our case `cars`)
- the **aes**thetics (how the data map to the plot)
- the **geom**s that determine how the plot is drawn (lines, points, columns, etc.)

```{r}
ggplot(cars) +
  aes(x=speed, y=dist)
```


```{r}
ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point()
```

For "simple" plots ggplot is much more verbose than base R but the defaults are nicer and for complicated plots it becomes much more efficient and structured.

>Q. Add a line to show the relationship of speed to stopping distance (i.e. add another "layer")

```{r}
p <- ggplot(cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(se=FALSE, method="lm")
```

```{r}
p
```

I can always save any ggplot object (i.e. plot) and then use it for later for adding more layers
>Q. Add a title and subtitle to the plot

```{r}
p + labs(title="My first ggplot",
         subtitle = "stopping distance of old cars",
         caption = "BIMM143",
         x="Speed (MPH)",
         y="Stopping distance (ft)") +
  theme_bw()
```

## Using different aes and geoms






```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```


>Q. How many genes are in this wee dataset?

```{r}
nrow(genes)
```

>Q. How many columns are there?

```{r}
ncol(genes)
```

>Q. What are the column names?

```{r}
colnames(genes)
```

>Q. How many "up" and "down" regulated genes are there?

```{r}
table(genes$State)
```
>Q. Make a first plot of this.

```{r}
ggplot(genes) +
  aes(x=Condition1, y=Condition2, colour = State) +
  scale_color_manual(values=c("blue","gray","red")) +
  geom_point() + 
  labs(title="Gene Expression Changes Upon Drug Treatment",
       subtitle = "Just another scatter plot made with ggplot",
       caption="BIMM143",
       x="Control (no drug)",
       y="Drug Treatment")
```

# Using different geoms

Let's plot some aspects of the in-built `mtcars` dataset.

```{r}
head(mtcars)
```

>Q. Scatter plot of `mpg` vs `disp`

```{r}
p1 <- ggplot(mtcars) +
  aes(x=mpg, y=disp) +
  geom_point()
```

>Q. Boxplot of `gear` vs `disp`

```{r}
p2 <- ggplot(mtcars) +
  aes(gear, disp, group=gear) +
  geom_boxplot()
```

>Q. Barplot of `carb` 

```{r}
p3 <- ggplot(mtcars) +
  geom_bar(aes(x=carb))
```


>Q. Smooth of `disp` vs `qsec`

```{r}
p4 <- ggplot(mtcars) +
  aes(disp, qsec) +
  geom_smooth()
```



I want to combine all these plots into one figure with multiple pannels.
We can use the **patchwork** package to do this.

```{r}
library(patchwork)

(p1 | p2 | p3 | p4)
```

```{r}
ggsave(filename = "myplot.png", width=5, height=2)
```


```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
```

And a wee peak
```{r}
head(gapminder)
```


>Q. How many countries are in this data set?

```{r}
length(table(gapminder$country))
```

>Q. Plot gdpPercap vs Life expectancy, color by continent


```{r}
ggplot(gapminder) +
  aes(x=gdpPercap, y=lifeExp, colour =continent) +
  geom_point(alpha=0.3) +
  facet_wrap(~continent) + 
  theme_bw()
```










Quarto *enables you to weave* together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

```{r}

```



```{r}
log(100)
```
## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
plot(1:10)
```

You can add options to executable code like this 

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
